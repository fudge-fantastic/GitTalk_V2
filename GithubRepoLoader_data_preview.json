[
  {
    "pageContent": "export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n",
    "metadata": {
      "source": "postcss.config.js",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "import type { Config } from \"tailwindcss\";\n\nexport default {\n    darkMode: [\"class\"],\n    content: [\"./app/**/{**,.client,.server}/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n  \textend: {\n  \t\tfontFamily: {\n  \t\t\tsans: [\n  \t\t\t\t'Inter',\n  \t\t\t\t'ui-sans-serif',\n  \t\t\t\t'system-ui',\n  \t\t\t\t'sans-serif',\n  \t\t\t\t'Apple Color Emoji',\n  \t\t\t\t'Segoe UI Emoji',\n  \t\t\t\t'Segoe UI Symbol',\n  \t\t\t\t'Noto Color Emoji'\n  \t\t\t]\n  \t\t},\n  \t\tborderRadius: {\n  \t\t\tlg: 'var(--radius)',\n  \t\t\tmd: 'calc(var(--radius) - 2px)',\n  \t\t\tsm: 'calc(var(--radius) - 4px)'\n  \t\t},\n  \t\tcolors: {\n  \t\t\tbackground: 'hsl(var(--background))',\n  \t\t\tforeground: 'hsl(var(--foreground))',\n  \t\t\tcard: {\n  \t\t\t\tDEFAULT: 'hsl(var(--card))',\n  \t\t\t\tforeground: 'hsl(var(--card-foreground))'\n  \t\t\t},\n  \t\t\tpopover: {\n  \t\t\t\tDEFAULT: 'hsl(var(--popover))',\n  \t\t\t\tforeground: 'hsl(var(--popover-foreground))'\n  \t\t\t},\n  \t\t\tprimary: {\n  \t\t\t\tDEFAULT: 'hsl(var(--primary))',\n  \t\t\t\tforeground: 'hsl(var(--primary-foreground))'\n  \t\t\t},\n  \t\t\tsecondary: {\n  \t\t\t\tDEFAULT: 'hsl(var(--secondary))',\n  \t\t\t\tforeground: 'hsl(var(--secondary-foreground))'\n  \t\t\t},\n  \t\t\tmuted: {\n  \t\t\t\tDEFAULT: 'hsl(var(--muted))',\n  \t\t\t\tforeground: 'hsl(var(--muted-foreground))'\n  \t\t\t},\n  \t\t\taccent: {\n  \t\t\t\tDEFAULT: 'hsl(var(--accent))',\n  \t\t\t\tforeground: 'hsl(var(--accent-foreground))'\n  \t\t\t},\n  \t\t\tdestructive: {\n  \t\t\t\tDEFAULT: 'hsl(var(--destructive))',\n  \t\t\t\tforeground: 'hsl(var(--destructive-foreground))'\n  \t\t\t},\n  \t\t\tborder: 'hsl(var(--border))',\n  \t\t\tinput: 'hsl(var(--input))',\n  \t\t\tring: 'hsl(var(--ring))',\n  \t\t\tchart: {\n  \t\t\t\t'1': 'hsl(var(--chart-1))',\n  \t\t\t\t'2': 'hsl(var(--chart-2))',\n  \t\t\t\t'3': 'hsl(var(--chart-3))',\n  \t\t\t\t'4': 'hsl(var(--chart-4))',\n  \t\t\t\t'5': 'hsl(var(--chart-5))'\n  \t\t\t},\n  \t\t\tsidebar: {\n  \t\t\t\tDEFAULT: 'hsl(var(--sidebar-background))',\n  \t\t\t\tforeground: 'hsl(var(--sidebar-foreground))',\n  \t\t\t\tprimary: 'hsl(var(--sidebar-primary))',\n  \t\t\t\t'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',\n  \t\t\t\taccent: 'hsl(var(--sidebar-accent))',\n  \t\t\t\t'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',\n  \t\t\t\tborder: 'hsl(var(--sidebar-border))',\n  \t\t\t\tring: 'hsl(var(--sidebar-ring))'\n  \t\t\t}\n  \t\t}\n  \t}\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n} satisfies Config;\n",
    "metadata": {
      "source": "tailwind.config.ts",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "import { vitePlugin as remix } from \"@remix-run/dev\";\nimport { defineConfig } from \"vite\";\nimport tsconfigPaths from \"vite-tsconfig-paths\";\n\ndeclare module \"@remix-run/node\" {\n  interface Future {\n    v3_singleFetch: true;\n  }\n}\n\nexport default defineConfig({\n  plugins: [\n    remix({\n      future: {\n        v3_fetcherPersist: true,\n        v3_relativeSplatPath: true,\n        v3_throwAbortReason: true,\n        v3_singleFetch: true,\n        v3_lazyRouteDiscovery: true,\n      },\n    }),\n    tsconfigPaths(),\n  ],\n});\n",
    "metadata": {
      "source": "vite.config.ts",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "// utils/prisma.ts\n\nimport { PrismaClient } from \"generated/prisma/client\";\n\nlet prisma: PrismaClient;\n\ndeclare global {\n  // eslint-disable-next-line no-var\n  var __prisma__: PrismaClient | undefined;\n}\n\nif (process.env.NODE_ENV === 'production') {\n  prisma = new PrismaClient();\n} else {\n  if (!global.__prisma__) {\n    global.__prisma__ = new PrismaClient();\n  }\n  prisma = global.__prisma__;\n}\n\nexport { prisma };\n",
    "metadata": {
      "source": "app/db.server.ts",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "/**\n * By default, Remix will handle hydrating your app on the client for you.\n * You are free to delete this file if you'd like to, but if you ever want it revealed again, you can run `npx remix reveal` ✨\n * For more information, see https://remix.run/file-conventions/entry.client\n */\n\nimport { RemixBrowser } from \"@remix-run/react\";\nimport { startTransition, StrictMode } from \"react\";\nimport { hydrateRoot } from \"react-dom/client\";\n\nstartTransition(() => {\n  hydrateRoot(\n    document,\n    <StrictMode>\n      <RemixBrowser />\n    </StrictMode>\n  );\n});\n",
    "metadata": {
      "source": "app/entry.client.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "/**\n * By default, Remix will handle generating the HTTP Response for you.\n * You are free to delete this file if you'd like to, but if you ever want it revealed again, you can run `npx remix reveal` ✨\n * For more information, see https://remix.run/file-conventions/entry.server\n */\n\nimport { PassThrough } from \"node:stream\";\n\nimport type { AppLoadContext, EntryContext } from \"@remix-run/node\";\nimport { createReadableStreamFromReadable } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport { isbot } from \"isbot\";\nimport { renderToPipeableStream } from \"react-dom/server\";\n\nconst ABORT_DELAY = 5_000;\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n  // This is ignored so we can keep it in the template for visibility.  Feel\n  // free to delete this parameter in your app if you're not using it!\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  loadContext: AppLoadContext\n) {\n  return isbot(request.headers.get(\"user-agent\") || \"\")\n    ? handleBotRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      )\n    : handleBrowserRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      );\n}\n\nfunction handleBotRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    let shellRendered = false;\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}\n      />,\n      {\n        onAllReady() {\n          shellRendered = true;\n          const body = new PassThrough();\n          const stream = createReadableStreamFromReadable(body);\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(stream, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          responseStatusCode = 500;\n          // Log streaming rendering errors from inside the shell.  Don't log\n          // errors encountered during initial shell rendering since they'll\n          // reject and get logged in handleDocumentRequest.\n          if (shellRendered) {\n            console.error(error);\n          }\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n\nfunction handleBrowserRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    let shellRendered = false;\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}\n      />,\n      {\n        onShellReady() {\n          shellRendered = true;\n          const body = new PassThrough();\n          const stream = createReadableStreamFromReadable(body);\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(stream, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          responseStatusCode = 500;\n          // Log streaming rendering errors from inside the shell.  Don't log\n          // errors encountered during initial shell rendering since they'll\n          // reject and get logged in handleDocumentRequest.\n          if (shellRendered) {\n            console.error(error);\n          }\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n",
    "metadata": {
      "source": "app/entry.server.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "import {\n  Links,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from \"@remix-run/react\";\nimport type { LinksFunction } from \"@remix-run/node\";\nimport { ThemeProvider } from \"~/components/theme-provider\"\nimport \"./tailwind.css\";\nimport { ScrollArea } from \"./components/ui/scroll-area\";\n\nexport const links: LinksFunction = () => [\n  { rel: \"preconnect\", href: \"https://fonts.googleapis.com\" },\n  {\n    rel: \"preconnect\",\n    href: \"https://fonts.gstatic.com\",\n    crossOrigin: \"anonymous\",\n  },\n  {\n    rel: \"stylesheet\",\n    href: \"https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap\",\n  },\n];\n\n\nexport function Layout({ children }: Readonly<{ children: React.ReactNode }>) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body>\n\n        <ThemeProvider attribute=\"class\" defaultTheme=\"system\" enableSystem disableTransitionOnChange>\n          <ScrollArea className=\"h-screen\">\n            {children}\n            <ScrollRestoration />\n            <Scripts />\n          </ScrollArea>\n        </ThemeProvider>\n      </body>\n    </html>\n  );\n}\n\nexport default function App() {\n  return <Outlet />;\n}\n",
    "metadata": {
      "source": "app/root.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "import { createCookieSessionStorage, redirect } from \"@remix-run/node\";\n\nexport type SessionData = {\n  userId: string;  // Changed from number to string to match Prisma UUID\n  userName: string;\n  userEmail: string;\n};\n\ntype SessionFlashData = {\n  error?: string;\n};\n\n// MAIN - BASE\nconst { getSession, commitSession, destroySession } =\n  createCookieSessionStorage<SessionData, SessionFlashData>({\n    cookie: {\n      name: \"GT_session\",\n      domain: \"localhost\", // Change this to our domain in production\n      httpOnly: true,\n      maxAge: 60 * 60, // 1 hour\n      path: \"/\",\n      sameSite: \"lax\",\n      secrets: [process.env.SESSION_SECRET ?? \"default-secret\"],\n      secure: process.env.NODE_ENV === \"production\",\n    },\n  });\n\n\n// setSession(...) sets the cookie and redirects\nexport async function setSession(userId: string, userName: string, userEmail: string, redirectTo = \"/projects\") {\n  const session = await getSession();\n  session.set(\"userId\", userId);\n  session.set(\"userName\", userName);\n  session.set(\"userEmail\", userEmail);\n\n  return redirect(redirectTo, {\n    headers: {\n      \"Set-Cookie\": await commitSession(session),\n    },\n  });\n}\n\n// requireUserSession(...) protects routes\nexport async function requireUserSession(request: Request) {\n  const session = await getSession(request.headers.get(\"Cookie\"));\n  if (!session.has(\"userId\")) {\n    throw redirect(\"/login\");\n  }\n\n  return session.data as SessionData;\n}\n\n// logout(...) destroys session and redirects\nexport async function logout(request: Request) {\n  const session = await getSession(request.headers.get(\"Cookie\"));\n\n  return redirect(\"/login\", {\n    headers: {\n      \"Set-Cookie\": await destroySession(session),\n    },\n  });\n}\n\nexport { getSession, commitSession, destroySession };\n",
    "metadata": {
      "source": "app/session.server.ts",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nhtml,\nbody {\n  @apply bg-zinc-100 dark:bg-zinc-900;\n\n  @media (prefers-color-scheme: dark) {\n    color-scheme: dark;\n  }\n}\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 240 10% 3.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 240 10% 3.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 240 10% 3.9%;\n    --primary: 240 5.9% 10%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 240 4.8% 95.9%;\n    --secondary-foreground: 240 5.9% 10%;\n    --muted: 240 4.8% 95.9%;\n    --muted-foreground: 240 3.8% 46.1%;\n    --accent: 240 4.8% 95.9%;\n    --accent-foreground: 240 5.9% 10%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 5.9% 90%;\n    --input: 240 5.9% 90%;\n    --ring: 240 10% 3.9%;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n    --radius: 0.5rem;\n    --sidebar-background: 0 0% 98%;\n    --sidebar-foreground: 240 5.3% 26.1%;\n    --sidebar-primary: 240 5.9% 10%;\n    --sidebar-primary-foreground: 0 0% 98%;\n    --sidebar-accent: 240 4.8% 95.9%;\n    --sidebar-accent-foreground: 240 5.9% 10%;\n    --sidebar-border: 220 13% 91%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n  .dark {\n    --background: 240 10% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 240 10% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 240 10% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 0 0% 98%;\n    --primary-foreground: 240 5.9% 10%;\n    --secondary: 240 3.7% 15.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 240 3.7% 15.9%;\n    --muted-foreground: 240 5% 64.9%;\n    --accent: 240 3.7% 15.9%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 3.7% 15.9%;\n    --input: 240 3.7% 15.9%;\n    --ring: 240 4.9% 83.9%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%;\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 224.3 76.3% 48%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}",
    "metadata": {
      "source": "app/tailwind.css",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "import { Form, Link, useLoaderData } from \"@remix-run/react\"\nimport { RiRobot2Line } from \"react-icons/ri\";\nimport { PiProjectorScreen } from \"react-icons/pi\";\n// import { FiCreditCard } from \"react-icons/fi\";\nimport { RxDashboard } from \"react-icons/rx\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"~/components/ui/dropdown-menu\"\n\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"~/components/ui/sidebar\"\nimport { GalleryVerticalEnd } from \"lucide-react\";\nimport { FaPlus, FaRegFolder } from \"react-icons/fa6\";\nimport { Dialog, DialogClose, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"~/components/ui/dialog\";\n\n// Menu items.\nconst group1 = [\n  {\n    title: \"Dashboard\",\n    url: \"/dashboard\",\n    icon: RxDashboard,\n  },\n  {\n    title: \"Q&A\",\n    url: \"/dashboard/askquestions\",\n    icon: RiRobot2Line,\n  },\n  {\n    title: \"Meetings\",\n    url: \"/dashboard/meetings\",\n    icon: PiProjectorScreen,\n  },\n  {\n    title: \"Projects\",\n    url: \"/dashboard/projects\",\n    icon: FaRegFolder,\n  }\n]\n\ntype LoaderData = {\n  user: {\n    username: string;\n    email: string;\n  };\n  projects: {\n    id: string;\n    projectName: string;\n  }[];\n};\n\nexport function AppSidebar() {\n  const { user, projects } = useLoaderData<LoaderData>();\n  return (\n    <Sidebar className=\"border-none\">\n      <SideBarHeaderComponent />\n      <SidebarContent>\n        <SideBarGroup1Component />\n        <SideBarGroup2Component projects={projects} />\n      </SidebarContent>\n      <SideBarFooterComponent user={user} />\n    </Sidebar>\n  )\n}\n\nfunction SideBarHeaderComponent() {\n  return (\n    <SidebarHeader className=\"flex flex-row items-center gap-[7px] mx-1.5 mt-3\">\n      <Link to=\"/\" className=\"flex flex-row items-center gap-[7px]\">\n        <GalleryVerticalEnd />\n        <h1 className=\"text-zinc-900 dark:text-white text-xl font-semibold tracking-wide\">GitTalk</h1>\n      </Link>\n    </SidebarHeader>\n  )\n}\n\nfunction SideBarGroup1Component() {\n  return (\n    <SidebarGroup>\n      <SidebarGroupLabel className=\"text-muted-foreground font-semibold\">Application</SidebarGroupLabel>\n      <SidebarGroupContent>\n        <SidebarMenu>\n          {group1.map((item) => (\n            <SidebarMenuItem key={item.title}>\n              <SidebarMenuButton asChild>\n                <Link to={item.url}>\n                  <item.icon />\n                  <span className=\"font-medium\">{item.title}</span>\n                </Link>\n              </SidebarMenuButton>\n            </SidebarMenuItem>\n          ))}\n        </SidebarMenu>\n      </SidebarGroupContent>\n    </SidebarGroup>\n  )\n}\n\nfunction SideBarGroup2Component({ projects }: { projects: { id: string; projectName: string }[] }) {\n  return (\n    <SidebarGroup>\n      <SidebarGroupLabel className=\"text-muted-foreground font-semibold\">Projects</SidebarGroupLabel>\n      <SidebarGroupAction title=\"Add Project\">\n        <Link to=\"/dashboard/projects/newproject\">\n          <FaPlus /> <span className=\"sr-only\">Add Project</span>\n        </Link>\n      </SidebarGroupAction>\n      <SidebarGroupContent>\n        <SidebarMenu>\n          {projects.filter((r, i) => i < 5).map((item) => (\n            <SidebarMenuItem key={item.projectName}>\n              <SidebarMenuButton asChild>\n                <Link to={`/dashboard/projects/${item.id}`} className=\"flex items-center gap-2\">\n                  <div className=\"h-6 w-6 rounded-md font-medium bg-zinc-950 text-white flex items-center justify-center text-xs\">\n                    {item.projectName[0].toUpperCase()}\n                  </div>\n                  <span className=\"font-medium\">{item.projectName}</span>\n                </Link>\n              </SidebarMenuButton>\n            </SidebarMenuItem>\n          ))}\n        </SidebarMenu>\n      </SidebarGroupContent>\n      <div className=\"flex items-center justify-center mt-2\">\n        <button className=\"text-sm font-medium text-muted-foreground hover:underline hover:underline-offset-2\">Show more...</button>\n      </div>\n    </SidebarGroup>\n  )\n}\n\nfunction SideBarFooterComponent({ user }: { user: { username: string; email: string } }) {\n\n  const getInitials = (name: string) => {\n    const parts = name.trim().split(\" \");\n    if (parts.length === 1) {\n      return parts[0][0]?.toUpperCase() || \"\";\n    } else {\n      return (parts[0][0] + parts[1][0])?.toUpperCase();\n    }\n  };\n\n  const initials = getInitials(user.username);\n\n  return (\n    <SidebarFooter className=\"flex flex-row items-center gap-3 mb-3.5 dark:hover:bg-zinc-800 ml-2 rounded-md\">\n      <Dialog>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <button className=\"flex gap-2 focus:outline-none\">\n              <div className=\"h-9 w-9 rounded-full bg-zinc-950 text-white flex items-center justify-center font-medium text-sm\">\n                {initials}\n              </div>\n              <div className=\"flex flex-col text-left\">\n                <p className=\"text-sm font-medium tracking-wide\">{user.username}</p>\n                <p className=\"text-xs leading-none text-muted-foreground tracking-wide\">{user.email}</p>\n              </div>\n            </button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent className=\"w-56 m-1.5\">\n            <DropdownMenuLabel>My Account</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            <DropdownMenuGroup>\n              <DropdownMenuItem>\n                Profile\n              </DropdownMenuItem>\n              <DropdownMenuItem>\n                Settings\n              </DropdownMenuItem>\n            </DropdownMenuGroup>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>GitHub</DropdownMenuItem>\n            <DropdownMenuItem>Support</DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DialogTrigger className=\"w-full\">\n              <DropdownMenuItem>\n                Logout\n              </DropdownMenuItem>\n            </DialogTrigger>\n          </DropdownMenuContent>\n        </DropdownMenu>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Are you sure?</DialogTitle>\n            <DialogDescription>\n              This will log you out of your account.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"flex justify-end gap-3 mt-1\">\n            <DialogClose asChild>\n              <button className=\"px-2 py-0.5 text-xs shadow-sm dark:shadow-none hover:shadow-md shadow-zinc-400 hover:shadow-zinc-400 dark:bg-zinc-800 border dark:hover:border-zinc-700 rounded-md font-semibold duration-150\">\n                Cancel\n              </button>\n            </DialogClose>\n            <Form method=\"post\" action=\"/logout\">\n              <button type=\"submit\" className=\"px-3 py-2 text-xs font-semibold bg-red-600 shadow-sm hover:shadow-md hover:shadow-red-500 shadow-red-500 text-white rounded-md duration-150\">Logout</button>\n            </Form>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </SidebarFooter>\n  )\n}",
    "metadata": {
      "source": "app/components/app-sidebar.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "import { Moon, Sun } from \"lucide-react\"\nimport { useTheme } from \"next-themes\"\n\nexport default function ModeToggle() {\n  const { theme, setTheme } = useTheme()\n\n  const toggleTheme = () => {\n    setTheme(theme === \"dark\" ? \"light\" : \"dark\")\n  }\n\n  return (\n    <button\n      onClick={toggleTheme}\n      className=\"relative flex items-center justify-center text-sm outline-none duration-150\"\n    >\n      <Sun className=\"size-4 transition-transform duration-300 dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute size-4 transition-transform duration-300 scale-0 rotate-90 dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </button>\n  )\n}",
    "metadata": {
      "source": "app/components/darkModeToggle.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "import ModeToggle from \"./darkModeToggle\";\nimport { SidebarTrigger } from \"./ui/sidebar\";\n\nexport default function NavBar() {\n    return (\n        <div className=\"ml-2 mr-5 mt-3 rounded-sm flex justify-between flex-row items-center\">\n            <div className=\"flex gap-4 items-center w-full\">\n                <SidebarTrigger className=\"ml-3\" />\n                <input\n                    // type=\"text\"\n                    placeholder=\"Search...\"\n                    required\n                    className=\"bg-zinc-100 dark:bg-zinc-900 dark:text-white text-zinc-950 p-1.5 rounded-md outline-none font-medium w-full mr-3.5\"\n                    // className=\"bg-zinc-100 dark:bg-zinc-900 dark:text-white text-zinc-950 p-1.5 rounded-md outline-none font-medium md:w-1/2 w-full mr-3.5\"\n                />\n            </div>\n            <ModeToggle />\n        </div>\n    );\n}",
    "metadata": {
      "source": "app/components/navbar.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "\"use client\"\n\nimport * as React from \"react\"\nimport { ThemeProvider as NextThemesProvider } from \"next-themes\"\n\nexport function ThemeProvider({\n  children,\n  ...props\n}: Readonly<React.ComponentProps<typeof NextThemesProvider>>) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}\n",
    "metadata": {
      "source": "app/components/theme-provider.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"~/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n",
    "metadata": {
      "source": "app/components/ui/button.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"~/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n",
    "metadata": {
      "source": "app/components/ui/dialog.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"~/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n",
    "metadata": {
      "source": "app/components/ui/dropdown-menu.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "import * as React from \"react\"\n\nimport { cn } from \"~/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n",
    "metadata": {
      "source": "app/components/ui/input.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"~/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n",
    "metadata": {
      "source": "app/components/ui/label.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"~/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n",
    "metadata": {
      "source": "app/components/ui/scroll-area.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"~/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n",
    "metadata": {
      "source": "app/components/ui/separator.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"~/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n      {children}\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n",
    "metadata": {
      "source": "app/components/ui/sheet.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"~/hooks/use-mobile\"\nimport { cn } from \"~/lib/utils\"\nimport { Button } from \"~/components/ui/button\"\nimport { Separator } from \"~/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"~/components/ui/sheet\"\nimport { Skeleton } from \"~/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"~/components/ui/tooltip\"\nimport { Input } from \"./input\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"14rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"bg-zinc-100 dark:bg-zinc-900 flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      // size=\"icon\"\n      className={cn(\"h-4 w-4\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft className=\"h-4 w-4\" />\n      {/* <span className=\"sr-only\">Toggle Sidebar</span> */}\n    </button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-0\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n",
    "metadata": {
      "source": "app/components/ui/sidebar.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "import { cn } from \"~/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-primary/10\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n",
    "metadata": {
      "source": "app/components/ui/skeleton.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "import * as React from \"react\"\n\nimport { cn } from \"~/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n",
    "metadata": {
      "source": "app/components/ui/textarea.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"~/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n",
    "metadata": {
      "source": "app/components/ui/tooltip.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n",
    "metadata": {
      "source": "app/hooks/use-mobile.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
    "metadata": {
      "source": "app/lib/utils.ts",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "// llmIntegration.server.ts\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\nimport { Document } from \"@langchain/core/documents\";\nimport { GoogleGenerativeAIEmbeddings } from \"@langchain/google-genai\";\nimport dotenv from \"dotenv\";\ndotenv.config();\n\nconst gemini_apiKey = process.env.GEMINI_API_KEY;\nif (!gemini_apiKey) {\n  throw new Error(\"API key not found.\");\n}\n\nconst genAI = new GoogleGenerativeAI(gemini_apiKey);\nexport const gemini_model = genAI.getGenerativeModel({ model: \"gemini-2.0-flash\" });\nexport const gemini_embeddings = new GoogleGenerativeAIEmbeddings({\n  model: \"text-embedding-004\",\n  apiKey: gemini_apiKey,\n});\n\n// Returns Summary of the commits (returns a string/text)\n// Example: https://github.com/fudge-fantastic/WordSmith/commit/55fc71d0b18a2e297427d85dcc2850c2b682cf80\n// https://github.com/fudge-fantastic/WordSmith/commit/<commitHash>.diff\nexport async function summarizeCommits(diffs: string): Promise<string> {\n  const template = `You're an expert at summarizing code changes. Summarize the following Git diff:${diffs}`;\n  try {\n    const result = await gemini_model.generateContent(template);\n    return result.response.text();\n  } catch (error) {\n    console.log(\"Error Summarizing commits\", error);\n    return \"Summary Failed\";\n  }\n}\n\n// Summarizing Code for each Document of a Github Repo\nexport async function summarizeCode(doc: Document): Promise<string> {\n  try {\n    console.log(\"Getting Summary for\", doc.metadata.source);\n    const code = doc.pageContent.slice(0, 10000);\n    const response = await gemini_model.generateContent([\n      `You're a senior software engineer who specialises in explaining projects. Explain the purpose of ${doc.metadata.source} file. Please provide a detailed and concise summary of the following code: ${code}`,\n    ]);\n    return response.response.text();\n  } catch (error) {\n    console.log(\"Error Summarizing code from summarizeCode()\", error);\n    return \"Summary Failed, from summarizeCode()\";\n  }\n}\n\n// Generates Embeddings for the summary (returns an array/vectors)\n// result vs result.values in generateEmbeddingsForSummary:\n// The GoogleGenerativeAIEmbeddings embedQuery method typically returns number[] directly. So, const embedding = result; return embedding.values; might be incorrect. \nexport async function generateEmbeddingsForSummary(summary: string) {\n  try {\n    const result = await gemini_embeddings.embedQuery(summary);\n    // const embedding = result; return embedding.values;\n    return result;\n  } catch (error) {\n    console.log(\n      \"Error generating embeddings from generateEmbeddingsForSummary()\",\n      error\n    );\n    // Either throw error or return [], but returning empty array might cause trouble;\n    // return undefined;\n    throw error;\n  }\n}",
    "metadata": {
      "source": "app/models/gemini.server.ts",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "import { Octokit } from \"octokit\";\nimport dotenv from \"dotenv\";\nimport { prisma } from \"~/db.server\";\ndotenv.config();\n\nexport const octokit = new Octokit({ auth: process.env.GITHUB_ACCESS_TOKEN });\nexport type CommitResponse = {\n  commitHash: string;\n  commitMessage: string;\n  commitUrl: string;\n  authorName?: string;\n  authorAvatarUrl?: string;\n  authorUrl?: string;\n  committedAt?: string;\n};\n\nconst DEFAULT_HUMAN_AVATAR = \"https://avatars.githubusercontent.com/u/583231?v=4\";\nconst DEFAULT_BOT_AVATAR = \"https://github.githubassets.com/images/modules/logos/github-mark.png\";\n\n// Splits a GitHub URL into its owner and repo parts\nfunction extractOwnerRepo(url: string) {\n  const parts = url.split(\"/\");\n  return { owner: parts[3], repo: parts[4] };\n}\n\n// Fetching GitHub URL FROM the DB\nexport async function getGithubUrl(projectId: string): Promise<string | null> {\n  try {\n    const project = await prisma.project.findUnique({\n      where: { id: projectId },\n      select: { githubUrl: true },\n    });\n    return project?.githubUrl || null;\n  } catch (error) {\n    console.error(\"❌ Error fetching GitHub URL:\", error);\n    return null;\n  }\n}\n\n// Fetching commits from GitHub Repository using Octokit, not from DB\nexport async function fetchCommitsFromGitHub(githubUrl: string): Promise<CommitResponse[]> {\n  const { owner, repo } = extractOwnerRepo(githubUrl);\n\n  const { data } = await octokit.rest.repos.listCommits({ owner, repo, per_page: 10 });\n  // console.log(data);\n  if (octokit) console.log(\"Octokit triggered\");\n  return data.map(commit => {\n    const isBot = commit.author?.type === \"Bot\";\n    return {\n      commitHash: commit.sha,\n      commitMessage: commit.commit.message,\n      commitUrl: commit.html_url,\n      authorName: commit.commit.author?.name || commit.author?.login || (isBot ? \"GitHub Bot\" : \"Unknown\"),\n      authorAvatarUrl: commit.author?.avatar_url || (isBot ? DEFAULT_BOT_AVATAR : DEFAULT_HUMAN_AVATAR),\n      authorUrl: commit.author?.html_url,\n      committedAt: commit.commit.author?.date || new Date().toISOString(),\n    };\n  });\n}\n\nexport async function saveCommitsToDB(projectId: string, commits: CommitResponse[]) {\n  const existing = await prisma.repoCommit.findMany({\n    where: { projectId },\n    select: { commitHash: true },\n  });\n\n  const existingHashes = new Set(existing.map(c => c.commitHash));\n  const newCommits = commits.filter(c => !existingHashes.has(c.commitHash));\n\n  if (newCommits.length === 0) {\n    console.log(\"✅ No new commits to save.\");\n  } else {\n    await prisma.repoCommit.createMany({\n      data: newCommits.map(commit => ({\n        projectId,\n        commitHash: commit.commitHash,\n        commitMessage: commit.commitMessage,\n        commitUrl: commit.commitUrl,\n        authorName: commit.authorName ?? \"Unknown\",\n        authorAvatarUrl: commit.authorAvatarUrl ?? DEFAULT_HUMAN_AVATAR,\n        authorUrl: commit.authorUrl ?? \"\",\n        committedAt: commit.committedAt ?? new Date().toISOString(),\n      })),\n      skipDuplicates: true,\n    });\n\n    console.log(`✅ Saved ${newCommits.length} new commits to DB.`);\n  }\n}\n\nexport async function getLatestCommits(projectId: string) {\n  const latestCommits = await prisma.repoCommit.findMany({\n    where: { projectId },\n    // select: { commitHash: true },\n    orderBy: { committedAt: \"desc\" },\n    take: 20\n  });\n  const result : CommitResponse[] = []\n  latestCommits.forEach((commit) => {\n    result.push({\n      commitHash: commit.commitHash,\n      commitMessage: commit.commitMessage,\n      commitUrl: commit.commitUrl,\n      authorName: commit.authorName ?? \"Unknown\",\n      authorAvatarUrl: commit.authorAvatarUrl ?? DEFAULT_HUMAN_AVATAR,\n      authorUrl: commit.authorUrl ?? \"\",\n      committedAt: commit?.committedAt.toString() || new Date().toISOString(),\n    })\n  })\n  return result;\n}\n\n// Storing commits in DB \nexport async function pollCommits(projectId: string): Promise<CommitResponse[] | undefined> {\n  try {\n    const githubUrl = await getGithubUrl(projectId);\n    if (!githubUrl) throw new Error(\"GitHub URL not found.\");\n\n    // Getting commits from DB if they exist\n    const commits = await getLatestCommits(projectId);\n    if(commits && commits?.length > 0){\n      return commits;\n    }else{\n      // Else, fetching commits from GitHub, saving them to DB and returning\n      const commits = await fetchCommitsFromGitHub(githubUrl);\n      await saveCommitsToDB(projectId, commits);\n      return commits;\n    }\n  } catch (error) {\n    console.error(\"❌ Error polling commits:\", error);\n    return undefined;\n  }\n}",
    "metadata": {
      "source": "app/models/github.server.ts",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "import { prisma } from \"~/db.server\";\n\nexport async function createSingleProject({\n  userId,\n  projectName,\n  githubUrl,\n}: {\n  userId: string;\n  projectName: string;\n  githubUrl: string;\n}) {\n  return prisma.project.create({\n    data: {\n      userId,\n      projectName,\n      githubUrl,\n    },\n  });\n}\n\n// Get view of all projects\nexport async function getProjectsForUser(userId: string) {\n  return prisma.project.findMany({\n    where: { userId },\n    orderBy: { createdAt: \"desc\" },\n  });\n}\n\n// Update a project\nexport async function updateProject(id: string, updates: {\n  projectName?: string;\n  githubUrl?: string;\n  description?: string;\n}) {\n  return prisma.project.update({\n    where: { id },\n    data: updates,\n  });\n}\n\n// Delete a project\nexport async function deleteProject(id: string) {\n  return prisma.project.delete({\n    where: { id },\n  });\n}\n",
    "metadata": {
      "source": "app/models/project.server.ts",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "// qdrant.server.ts\nimport { QdrantClient } from \"@qdrant/js-client-rest\";\nimport dotenv from \"dotenv\"; dotenv.config();\nimport { Document } from \"@langchain/core/documents\";\nimport { generateEmbeddingsForSummary } from \"./gemini.server\";\n\nexport const collection_name= process.env.COLLECTION_NAME;\n\n// Instantiating Vector-DB client\nexport const qdrant = new QdrantClient({\n  url: process.env.QDRANT_URL,\n  apiKey: process.env.QDRANT_API_KEY,\n});\n\n// Create collection\nexport async function createCollection(collectionName: string) {\n  try {\n    const exists = await qdrant\n      .getCollections()\n      .then((res) => res.collections.some((c) => c.name === collectionName));\n\n    if (!exists) {\n      await qdrant.createCollection(collectionName, {\n        vectors: {\n          size: 768,\n          distance: \"Cosine\",\n        },\n      });\n      console.log(\"Collection created:\", collectionName);\n    }\n  } catch (error) {\n    console.error(\"Error creating collection:\", error);\n  }\n}\n\n// Upsert documents into Qdrant\nexport async function upsertSummarizedDocsToQdrant(\n  documents: Document[],\n  collectionName: string\n) {\n  const points = await Promise.all(\n    documents.map(async (doc) => {\n      const summary = doc.metadata.summary as string;\n      let embedding: number[] | undefined;\n      try {\n        embedding = await generateEmbeddingsForSummary(summary);\n      } catch (error) {\n        console.error(\n          `Failed to generate embedding for doc ${doc.metadata.source}:`,\n          error\n        );\n        return null; // Decide how to handle this: skip the document, use a default embedding, etc. Return null to filter out this point later\n      }\n\n      if (!embedding) return null; \n\n      return {\n        id: crypto.randomUUID(),\n        vector: embedding,\n        payload: {\n          summary,\n          source: doc.metadata.source,\n          projectId: doc.metadata.projectId,\n          userId: doc.metadata.userId,\n          repo: doc.metadata.repo,\n        },\n      };\n    })\n  ).then((results) => results.filter((point) => point !== null)); // Filter out failed points\n\n  if (points.length > 0) {\n    await qdrant.upsert(collectionName, { points });\n    console.log(\n      `✅ Upserted ${points.length} summarized documents to ${collectionName}`\n    );\n  } else {\n    console.log(\"No valid documents to upsert after processing embeddings.\");\n  }\n}\n\n// Delete all points for a project\nexport async function deleteProjectFromCollection(projectId: string) {\n  try {\n    await qdrant.delete(collection_name as string, {\n      filter: {\n        must: [\n          {\n            key: \"projectId\",\n            match: { value: projectId },\n          },\n        ],\n      },\n    });\n    console.log(`🗑️ Deleted all points for projectId=${projectId}`);\n  } catch (error) {\n    console.error(\"❌ Deletion failed for projectId=\", projectId, error);\n  }\n}",
    "metadata": {
      "source": "app/models/qdrant.server.ts",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "import dotenv from \"dotenv\";\ndotenv.config();\nimport { GithubRepoLoader } from \"@langchain/community/document_loaders/web/github\";\nimport { Document } from \"@langchain/core/documents\";\nimport fs from \"fs/promises\";\nimport { summarizeCode } from \"./gemini.server\";\n\nconst removeUnwanted = [\n  \"*.md\",\n  \"*.json\",\n  \"*.yaml\",\n  \"*.yml\",\n  \"*.txt\",\n  \"*.log\",\n  \"*.lock\",\n  \"*.mdx\",\n  \"*.cjs\",\n  \"LICENCE\",\n  \"LICENSE\",\n  \".gitignore\",\n  \".gitattributes\",\n  \".editorconfig\",\n  \".DS_Store\",\n  \"node_modules/\",\n  \"dist/\",\n  \"build/\",\n  \"out/\",\n  \"tmp/\",\n  \"temp/\",\n  \"coverage/\",\n  \"*.test.ts\",\n  \"*.spec.ts\",\n  \"*.test.js\",\n  \"*.spec.js\",\n];\n\n// Langchain's + Github API\nexport async function loadGithubDocs(\n  githubUrl: string,\n  userId?: string,\n  projectId?: string\n): Promise<Document[]> {\n  const loader = new GithubRepoLoader(githubUrl, {\n    branch: \"main\",\n    recursive: true,\n    unknown: \"warn\",\n    maxConcurrency: 5,\n    ignorePaths: removeUnwanted,\n  });\n\n  const rawDocs = await loader.load();\n  const first_three_docs = rawDocs.slice(0, 3);\n\n  // Wait for summaries and wrap in Document\n  const final_documents = await Promise.all(\n    first_three_docs.map(async (doc) => {\n      const summary = await summarizeCode(doc);\n      return new Document({\n        pageContent: doc.pageContent,\n        metadata: {\n          source: doc.metadata.source,\n          userId: userId ?? \"test-user\",\n          projectId: projectId ?? \"test-project\",\n          repo: githubUrl,\n          summary: summary,\n        },\n      });\n    })\n  );\n\n  // Save to file\n  console.log(\"Saving to file\");\n  await fs.writeFile(\n    \"final_docs.json\",\n    JSON.stringify(final_documents, null, 2),\n    \"utf-8\"\n  );\n  console.log(\"Saved to file\");\n  return final_documents;\n}\n",
    "metadata": {
      "source": "app/models/test.server.ts",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "import dotenv from \"dotenv\";\nimport { collection_name, createCollection, deleteProjectFromCollection, upsertSummarizedDocsToQdrant } from \"./qdrant.server\";\nimport { loadGithubDocs } from \"./test.server\";\ndotenv.config();\n\nasync function run() {\n  const githubUrl = \"https://github.com/fudge-fantastic/GitTalk_V2\";\n  const userId = \"aaditya\";\n  const projectId = \"git-talk-v2\";\n\n  if (!collection_name) {\n    throw new Error(\"❌ COLLECTION_NAME is missing in .env\");\n  }\n\n  await createCollection(collection_name);\n\n  if (process.argv.includes(\"--clean\")) {\n    await deleteProjectFromCollection(projectId);\n  }\n\n  const docs = await loadGithubDocs(githubUrl, userId, projectId);\n  await upsertSummarizedDocsToQdrant(docs, collection_name);\n  \n}\n\nrun().catch((err) => console.error(\"❌ Pipeline failed:\", err));\n",
    "metadata": {
      "source": "app/models/test2.server.ts",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "import bcrypt from \"bcryptjs\";\nimport { prisma } from \"~/db.server\";\n\ninterface CreateUser {\n    email: string;\n    password: string;\n    username: string;\n}\n\n// For Register\nexport async function createUser({ email, password, username }: CreateUser) {\n    const hashedPassword = await bcrypt.hash(password, 10);\n    return prisma.user.create({\n    data: { email, password: hashedPassword, username },\n  });\n}\n\n// For Login\nexport async function getUserByEmail(email: string) {\n    return prisma.user.findUnique({\n      where: { email },\n    });\n  }",
    "metadata": {
      "source": "app/models/user.server.ts",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "export default function UnknownRoute() {\n    return (\n        <div className=\"flex my-12 items-center justify-center min-h-screen\">\n            <h1 className=\"text-4xl font-bold text-red-500\">Page Not Found or Work in Progress</h1>\n        </div>\n    );\n}",
    "metadata": {
      "source": "app/routes/$.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "export default function DashBoardNotFound() {\n    return (\n        <div className=\"flex items-center justify-center my-12\">\n            <h1 className=\"text-2xl font-bold text-red-500\">Page Not Available</h1>\n        </div>\n    );\n}",
    "metadata": {
      "source": "app/routes/dashboard.$.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "// dashboard._index.tsx\nexport default function DashboardIndex() {\n    return (\n      <div className=\"flex flex-col items-center justify-center\">\n        <h1 className=\"text-2xl font-bold\">Welcome back 👋</h1>\n        <p>Here&apos;s a quick summary of your projects:</p>\n        {/* Maybe a component like: <ProjectOverviewList /> */}\n      </div>\n    );\n  }\n  ",
    "metadata": {
      "source": "app/routes/dashboard._index.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "export default function AskQuestions() {\n    return (\n        <div className=\"flex items-center justify-center\">\n            Ask Questions\n        </div>\n    );\n}",
    "metadata": {
      "source": "app/routes/dashboard.askquestions.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "export default function Meetings() {\n    return (\n        <div className=\"flex my-12 items-center justify-center\">\n            Meetings\n        </div>\n    );\n}",
    "metadata": {
      "source": "app/routes/dashboard.meetings.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "// dashboard.projects.$id.tsx\nimport { useParams, useOutletContext, useLoaderData, Link } from \"@remix-run/react\";\nimport { Textarea } from \"~/components/ui/textarea\";\nimport { FaCodeCommit } from \"react-icons/fa6\";\nimport { ScrollArea } from \"~/components/ui/scroll-area\";\nimport { json, LoaderFunctionArgs } from \"@remix-run/node\";\nimport { CommitResponse, pollCommits } from \"~/models/github.server\";\nimport { FiExternalLink } from \"react-icons/fi\";\n// import { IoMdRefresh } from \"react-icons/io\";\n\nexport interface SingleProjectData {\n    id: string;\n    projectName: string;\n    description: string;\n    createdAt: string;\n    updatedAt: string;\n    githubUrl: string;\n}\n\nexport async function loader({ params }: LoaderFunctionArgs) {\n    const projectId = params.id;\n    if (!projectId) throw new Response(\"Project ID required\", { status: 400 });\n\n    // Poll commits from GitHub and save new ones to DB\n    const commits = await pollCommits(projectId);\n\n    // If pollCommits returns undefined on error, fallback to empty array\n    return json({ commits: commits ?? [] });\n}\n\nexport default function ProjectDetailsRoute() {\n    const { id } = useParams();\n    const { projects } = useOutletContext<{ projects: SingleProjectData[] }>();\n    const { commits } = useLoaderData<{ commits: CommitResponse[] }>();\n    // console.log(commits);\n\n    const project = projects.find((p) => p.id === id);\n\n    if (!project) { return <p className=\"text-red-500 text-center text-lg\">Project not found.</p>; }\n\n    return (\n        <div>\n            <div className=\"flex flex-row w-full gap-3\">\n                <div className=\"flex justify-between flex-col px-4 py-3 dark:bg-zinc-900 bg-zinc-100 rounded-md shadow-sm shadow-zinc-400 dark:shadow-none w-[60%]\">\n                    <div>\n                        <h1 className=\"text-lg font-semibold\">Ask a question</h1>\n                        <p className=\"text-muted-foreground text-sm mb-2\">GitTalk has knowledge to your codebase</p>\n                        <Textarea\n                            placeholder=\"Which part of the codebase do you need help with?\"\n                            className=\"bg-white dark:bg-zinc-950 rounded-md h-28\"\n                        />\n                    </div>\n                    <div className=\"mb-2\">\n                        <button className=\"mt-4 px-2.5 py-1.5 dark:bg-white dark:text-black dark:hover:bg-zinc-200 bg-zinc-950 text-white hover:bg-zinc-900 rounded-md text-sm font-semibold transition\">Submit</button>\n                    </div>\n                </div>\n                <div className=\"py-3 pl-4 dark:bg-zinc-900 bg-zinc-100 rounded-md shadow-sm shadow-zinc-400 dark:shadow-none w-[40%]\">\n                    <h1 className=\"text-lg font-semibold mb-1\">{project.projectName}</h1>\n                    <ScrollArea className=\"font-medium text-muted-foreground tracking-wider text-sm h-44 overflow-auto pr-4 text-justify\">\n                        Lorem ipsum dolor sit amet consectetur adipisicing elit. Iusto ex rerum repellat labore. Ipsa blanditiis adipisci, autem porro, at dolorum saepe animi iusto ratione molestiae et tempore? Ullam, animi consectetur! Lorem ipsum dolor sit amet consectetur adipisicing elit. Molestiae similique, architecto nobis eaque officia iusto eos possimus deserunt\n                    </ScrollArea>\n                </div>\n            </div>\n            <div className=\"mt-3\">\n                <div className=\"flex justify-between items-center\">\n                    <div className=\"flex items-center gap-2\">\n                        <FaCodeCommit className=\"w-7 h-7\" />\n                        <h1 className=\"font-semibold text-xl\">Recent Commits</h1>\n                        <Link to={project.githubUrl} target=\"_blank\" className=\"font-medium lowercase hover:underline flex items-center gap-1\" rel=\"noreferrer\">\n                            <p>Visit Repository</p>\n                            <FiExternalLink className=\"w-4 h-4\" />\n                        </Link>\n                    </div>\n                    <button className=\"flex items-center gap-1 px-2.5 py-1.5 dark:bg-white dark:text-black dark:hover:bg-zinc-200 bg-zinc-950 text-white hover:bg-zinc-900 rounded-md text-sm font-semibold transition\">\n                        {/* <IoMdRefresh className=\"w-5 h-5\" /> */}\n                        <p>Refresh Commits</p>\n                    </button>\n                </div>\n                <div className=\"bg-zinc-100 dark:bg-zinc-900 shadow-sm shadow-zinc-400 dark:shadow-none rounded-md mt-3 h-auto overflow-auto pr-4 space-y-6 px-4 py-4\">\n                    {commits.length === 0 ? (\n                        <p className=\"text-muted-foreground\">No commits found.</p>\n                    ) : (\n                        commits.map((commit) => (\n                            <div key={commit.commitHash} className=\"flex items-center\">\n                                <div className=\"flex items-start gap-4\">\n                                    {/* Avatar */}\n                                    <div className=\"w-9 h-9 flex items-center justify-center shrink-0 mt-1\">\n                                        {commit.authorAvatarUrl && (\n                                            <img\n                                                src={commit.authorAvatarUrl}\n                                                alt={commit.authorName}\n                                                className=\"w-9 h-9 rounded-full object-cover\"\n                                            />\n                                        )}\n                                    </div>\n                                    {/* Commit details */}\n                                    <div className=\"flex flex-col\">\n                                        <div className=\"flex items-center gap-2 text-sm mb-1\">\n                                            <Link to={commit.authorUrl ?? ''} target=\"_blank\" className=\"font-semibold\" rel=\"noreferrer\">{commit.authorName || \"Unknown Author\"}</Link>\n                                            <Link to={commit.commitUrl ?? ''} target=\"_blank\" className=\"text-muted-foreground\" rel=\"noreferrer\">commited</Link>\n                                            <time dateTime={commit.committedAt} className=\"text-muted-foreground uppercase\">\n                                                @{new Date(commit.committedAt || \"\").toLocaleString()}\n                                            </time>\n                                        </div>\n                                        <p className=\"text-sm line-clamp-3 tracking-tight font-medium\">{commit.commitMessage}</p>\n                                    </div>\n                                </div>\n                            </div>\n                        ))\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n}\n",
    "metadata": {
      "source": "app/routes/dashboard.projects.$id.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "// routes/dashboard.projects._index.tsx\nimport { Form, Link, useOutletContext } from \"@remix-run/react\";\nimport { Plus } from \"lucide-react\";\nimport { ProjectData } from \"./dashboard.projects\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"~/components/ui/dropdown-menu\"\nimport { BsThreeDotsVertical } from \"react-icons/bs\";\nimport { Dialog, DialogClose, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"~/components/ui/dialog\";\nimport { ActionFunction, redirect } from \"@remix-run/node\";\nimport { prisma } from \"~/db.server\";\n\nexport interface ContextData {\n  projects: ProjectData[];\n}\n\nexport function formatDate(dateString: string) {\n  return new Intl.DateTimeFormat(\"en-US\", {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n  }).format(new Date(dateString));\n}\n\nexport const action: ActionFunction = async ({ request }) => {\n  const formData = await request.formData();\n  const action = formData.get(\"_action\");\n  const projectId = formData.get(\"projectId\");\n\n  if (action === \"delete\" && typeof projectId === \"string\") {\n    await prisma.project.delete({\n      where: { id: projectId },\n    });\n\n    return redirect(\"/dashboard/projects\");\n  }\n  return null;\n};\n\nfunction ProjectCard({ project }: { project: ProjectData }) {\n  return (\n    <Dialog>\n      <div className=\"block hover:shadow-md transition-shadow outline-none\">\n        <div className=\"bg-zinc-100 dark:bg-zinc-900 dark:border dark:hover:border-zinc-700 dark:text-white text-zinc-950 py-3 px-3.5 rounded-md shadow-sm shadow-zinc-400 dark:shadow-none flex flex-col justify-between h-full transition\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-lg font-semibold\">{project.projectName}</div>\n            <DropdownMenu>\n              <DropdownMenuTrigger className=\"p-1.5 rounded-md outline-none dark:hover:bg-zinc-700 transition\">\n                <BsThreeDotsVertical className=\"w-4.5 h-4.5\" />\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"font-medium\">\n                <DropdownMenuItem asChild>\n                  <Link\n                    to={`/dashboard/projects/${project.id}`}\n                    className=\"w-full\"\n                  >\n                    View\n                  </Link>\n                </DropdownMenuItem>\n                <DropdownMenuItem>Edit</DropdownMenuItem>\n                <DialogTrigger className=\"w-full\">\n                  <DropdownMenuItem>Delete</DropdownMenuItem>\n                </DialogTrigger>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">{formatDate(project.createdAt)}</p>\n          <p className=\"text-sm text-zinc-400 mt-2\">\n            {project.description || \"No description provided.\"}\n          </p>\n        </div>\n      </div>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Are you sure?</DialogTitle>\n          <DialogDescription>\n            This action will delete your project.\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"flex justify-end gap-3 mt-1\">\n          <DialogClose asChild>\n            <button className=\"px-2 py-0.5 text-xs shadow-sm dark:shadow-none hover:shadow-md shadow-zinc-400 hover:shadow-zinc-400 dark:bg-zinc-800 border dark:hover:border-zinc-700 rounded-md font-semibold duration-150\">\n              Cancel\n            </button>\n          </DialogClose>\n          <Form method=\"post\">\n            <input type=\"hidden\" name=\"projectId\" value={project.id} />\n            <button type=\"submit\" name=\"_action\" value=\"delete\"\n              className=\"px-3 py-2 text-xs font-semibold bg-red-600 shadow-sm hover:shadow-md hover:shadow-red-500 shadow-red-500 text-white rounded-md duration-150\">\n              Delete\n            </button>\n          </Form>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport default function ProjectsIndex() {\n  // Calling projects data from the parent route (dashboard.projects.tsx)\n  const { projects } = useOutletContext<ContextData>();\n\n  return (\n    <div className=\"grid md:grid-cols-3 sm:grid-cols-2 grid-cols-1 gap-3\">\n      {projects.map((project) => (\n        <ProjectCard key={project.id} project={project} />\n      ))}\n\n      {/* New Project Card */}\n      <Link to=\"/dashboard/projects/newproject\" className=\"gap-2 bg-zinc-100 hover:bg-zinc-200 dark:bg-zinc-950 dark:hover:bg-zinc-900 transition rounded-md flex items-center justify-center text-center py-10 px-5 font-semibold text-zinc-600 dark:text-zinc-300 border border-dashed border-zinc-400\">\n        <Plus className=\"w-6 h-6\" />\n        <p className=\"md:text-lg text-sm\">Create New Project</p>\n      </Link>\n    </div>\n  );\n}",
    "metadata": {
      "source": "app/routes/dashboard.projects._index.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "// dashboard.projects.new.tsx\nimport { Form, json, redirect, useActionData } from \"@remix-run/react\";\nimport { LuCodeXml } from \"react-icons/lu\";\nimport { createSingleProject } from \"~/models/project.server\";\nimport { getSession } from \"~/session.server\";\nimport dotenv from \"dotenv\"; import { createCollection, upsertSummarizedDocsToQdrant } from \"~/models/qdrant.server\";\nimport { loadGithubDocs } from \"~/models/test.server\";\ndotenv.config();\n\nexport function isValidGitHubRepoUrl(url: string): boolean {\n    const regex = /^https:\\/\\/github\\.com\\/[\\w-]+\\/[\\w.-]+\\/?$/i;\n    return regex.test(url.trim());\n}\n\nexport async function action({ request }: { request: Request }) {\n    const body = await request.formData();\n    const projectName = body.get(\"projectName\") as string;\n    const githubUrl = body.get(\"githubUrl\") as string;\n    // const githubToken = body.get(\"githubToken\") as string;\n\n    const isValidGitHubUrl = isValidGitHubRepoUrl(githubUrl);\n    if (!isValidGitHubUrl) {\n        return json({ error: \"Invalid GitHub repository URL\" }, { status: 400 });\n    }\n\n    const session = await getSession(request.headers.get(\"Cookie\"));\n    const userId = session.get(\"userId\");\n\n    if (!userId) {\n        return json({ error: \"Unauthorized User\" }, { status: 401 });\n    }\n\n    try {\n        const project = await createSingleProject({ userId, projectName, githubUrl });\n        console.log(\"✅ Project created:\", { projectName, githubUrl });\n\n        const collection_name = process.env.COLLECTION_NAME || \"\";\n        await createCollection(collection_name);\n        const docs = await loadGithubDocs(githubUrl, userId, project.id);\n        await upsertSummarizedDocsToQdrant(docs, collection_name);\n\n        return redirect(`/dashboard/projects/${project.id}`);\n    } catch (error) {\n        console.error(\"❌ Failed to create project and vector data:\", error);\n        return json({ error: \"Failed to create project\" }, { status: 500 });\n    }\n}\n\nexport default function CreateProject() {\n    const actionData = useActionData<typeof action>();\n    return (\n        <div className=\"flex items-center justify-center my-12\">\n            <div className=\"flex flex-col items-center\">\n                <div className=\"flex flex-row items-center gap-3\">\n                    <LuCodeXml className=\"md:h-16 md:w-16 w-12 h-12 text-muted-foreground\" />\n                    <div className=\"flex flex-col\">\n                        <h1 className=\"md:text-2xl text-xl font-semibold\">Create New Project</h1>\n                        <p className=\"md:text-sm text-xs text-muted-foreground font-medium\">Enter your GitHub repository details</p>\n                    </div>\n                </div>\n                <Form method=\"post\" className=\"w-full flex flex-col gap-4 md:p-0 p-2 mt-4\">\n                    {actionData?.error && (\n                        <p className=\"text-red-500 text-center\">{actionData.error}</p>\n                    )}\n                    <label>\n                        <span className=\"text-sm text-muted-foreground font-medium\">Project Name</span>\n                        <input\n                            name=\"projectName\"\n                            type=\"text\"\n                            placeholder=\"Can be any name :)\"\n                            required\n                            className=\"bg-zinc-200 dark:bg-zinc-900 dark:text-white text-zinc-950 p-2 md:text-base text-sm w-full rounded-md outline-none font-medium\"\n                        />\n                    </label>\n                    <label>\n                        <span className=\"text-sm text-muted-foreground font-medium\">Github Repository URL</span>\n                        <input\n                            name=\"githubUrl\"\n                            type=\"url\"\n                            placeholder=\"https://github.com/username/repo\"\n                            required\n                            className=\"bg-zinc-200 dark:bg-zinc-900 dark:text-white text-zinc-950 p-2 md:text-base text-sm w-full rounded-md outline-none font-medium\"\n                        />\n                    </label>\n                    <button\n                        type=\"submit\"\n                        className=\"p-2 md:text-base text-sm w-full rounded-md bg-primary text-primary-foreground font-semibold mt-3\">\n                        Create Project\n                    </button>\n                </Form>\n            </div>\n        </div>\n    );\n}",
    "metadata": {
      "source": "app/routes/dashboard.projects.newproject.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "// dashboard.projects.tsx: layout\nimport { Outlet, useOutletContext } from \"@remix-run/react\";\n\nexport interface ProjectData {\n  id: string;\n  projectName: string;\n  description: string;\n  createdAt: string;\n}\n\ninterface LoaderData {\n  projects: ProjectData[];\n}\n\nexport default function ProjectsLayout() {\n  const {projects}  = useOutletContext<LoaderData>();\n  // console.log(\"Called from dashboard.projects.tsx\",projects);\n  return (\n    <div className=\"mx-1\">\n      <Outlet context={{projects}}/>\n    </div>\n  );\n}\n",
    "metadata": {
      "source": "app/routes/dashboard.projects.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "// dashboard.tsx: layout \nimport { json, LoaderFunctionArgs } from \"@remix-run/node\";\nimport { Outlet, useLoaderData } from \"@remix-run/react\";\nimport { AppSidebar } from \"~/components/app-sidebar\";\nimport NavBar from \"~/components/navbar\";\nimport { SidebarProvider } from \"~/components/ui/sidebar\";\nimport { prisma } from \"~/db.server\";\nimport { getProjectsForUser } from \"~/models/project.server\";\nimport { requireUserSession } from \"~/session.server\";\n\n// Fetching entire User and Projects data\nexport async function loader({ request }: LoaderFunctionArgs) {\n  const session = await requireUserSession(request); // get the session\n  const projects = await getProjectsForUser(session.userId); // get the projects\n  const user = await prisma.user.findUnique({\n    where: { id: session.userId },\n    select: {\n      username: true,\n      email: true,\n    },\n  });\n\n  if (!user) throw new Response(\"User not found\", { status: 404 });\n  // console.log(user, projects);\n  return json({ user, projects });\n}\n\nexport default function DashboardLayout() {\n  const data = useLoaderData();\n  return (\n    <SidebarProvider>\n      <AppSidebar />\n      {/* Whole Canvas Container */}\n      <div className=\"flex flex-col w-full rounded-xl dark:bg-zinc-950 bg-white m-3 shadow-md shadow-zinc-400 dark:shadow-none\">\n        <NavBar />\n        <div className=\"m-3\">\n          <Outlet context={data} />\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n",
    "metadata": {
      "source": "app/routes/dashboard.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Form, json, Link, redirect, useActionData } from \"@remix-run/react\";\nimport bcrypt from \"bcryptjs\";\nimport { GalleryVerticalEnd } from \"lucide-react\";\nimport { FaGithubAlt } from \"react-icons/fa6\";\nimport ModeToggle from \"~/components/darkModeToggle\";\nimport { Button } from \"~/components/ui/button\";\nimport { Input } from \"~/components/ui/input\";\nimport { cn } from \"~/lib/utils\";\nimport { getUserByEmail } from \"~/models/user.server\";\nimport { getSession, setSession } from \"~/session.server\";\n\nexport async function action({ request }: { request: Request }) {\n  const body = await request.formData();\n  const email = body.get(\"email\") as string;\n  const password = body.get(\"password\") as string;\n\n  // Calling the getUserByEmail function from the user.server (Prisma!)\n  const user = await getUserByEmail(email);\n\n  // Check if field is empty\n  if (!email) {\n    return json({ error: \"Email is required\" }, { status: 400 });\n  }\n\n  if (!password) {\n    return json({ error: \"Password is required\" }, { status: 400 });\n  }\n\n  if (!user) {\n    return json({ error: \"Email not found, please sign up\" }, { status: 401 });\n  }\n\n  const isValidPassword = await bcrypt.compare(password, user.password);\n  if (!isValidPassword) {\n    return json({ error: \"Incorrect Password\" }, { status: 401 });\n  }\n\n  return await setSession(user.id, user.username, user.email, \"/dashboard\");\n}\n\nexport async function loader({ request }: { request: Request }) {\n  const session = await getSession(request.headers.get(\"Cookie\"));\n  if (session.has(\"userId\")) {\n    return redirect(\"/dashboard\");\n  }\n  return null;\n}\n\nexport type ActionResponse = {\n  error?: string;\n};\n\nexport default function LoginPage(props: any) {\n  const actionData = useActionData<ActionResponse>()\n  return (\n    <div className=\"p-3.5 px-5 min-h-screen dark:bg-zinc-950\">\n      <div className=\"flex flex-row items-center justify-between\">\n        <Link to=\"/\" className=\"font-semibold text-xl flex flex-row items-center gap-1.5\"><GalleryVerticalEnd /> GitTalk</Link>\n        <ModeToggle />\n      </div>\n      <div className=\"flex flex-col items-center justify-center mt-8\">\n        <Form method=\"post\" className={cn(\"flex flex-col gap-10\")} {...props}>\n          {/* Heading */}\n          <div className=\"flex flex-col items-center gap-0 text-center\">\n            <h1 className=\"text-[22px] font-bold\">Login to your account</h1>\n            <p className=\"text-sm text-muted-foreground\">\n              Enter your email below to login to your account\n            </p>\n          </div>\n\n          {actionData?.error && (\n            <p className=\"text-red-500 text-center\">{actionData.error}</p>\n          )}\n\n          {/* Form Fields */}\n          <div className=\"grid gap-6\">\n            {/* Email Input */}\n            <div className=\"grid gap-1\">\n              <label htmlFor=\"email\" className=\"text-sm flex flex-row gap-2 items-center\">\n                Email\n\n              </label>\n              <Input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                placeholder=\"johndoe@example.com\"\n              />\n            </div>\n\n            {/* Password Input */}\n            <div className=\"grid gap-1\">\n              <div>\n                <label htmlFor=\"password\" className=\"text-sm\">Password</label>\n              </div>\n              <Input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                placeholder=\"Enter your password\"\n              />\n              <Link\n                to=\"/forgot-password\"\n                className=\"text-xs underline-offset-3 hover:underline text-right\"\n              >\n                Forgot your password?\n              </Link>\n            </div>\n\n            {/* Submit Button */}\n            <Button type=\"submit\" className=\"w-full\">\n              Login\n            </Button>\n\n            {/* Divider */}\n            <div className=\"text-center text-sm relative z-10 my-2 text-muted-foreground\">\n              Or continue with\n            </div>\n\n            {/* GitHub Login Button */}\n            <button className=\"text-sm w-full flex items-center gap-2 dark:bg-zinc-900 justify-center py-1.5 rounded-md shadow-lg dark:border-none border border-zinc-100 hover:bg-zinc-100 dark:hover:bg-zinc-800\">\n              <FaGithubAlt className=\"h-5 w-5\" />\n              Login with GitHub\n            </button>\n          </div>\n\n          {/* Signup Link */}\n          <div className=\"text-center text-sm\">\n            Don&apos;t have an account?{\" \"}\n            <Link to=\"/register\" className=\"underline underline-offset-2\">\n              Sign up\n            </Link>\n          </div>\n        </Form>\n      </div>\n    </div>\n  )\n}",
    "metadata": {
      "source": "app/routes/login.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "// logout.tsx\nimport { redirect } from \"@remix-run/node\";\nimport { destroySession, getSession } from \"~/session.server\";\n\nexport async function action ({ request }: { request: Request }) {\n  const session = await getSession(request.headers.get(\"Cookie\"));\n  return redirect(\"/login\", {\n    headers: {\n      \"Set-Cookie\": await destroySession(session), // Ensure this function works as intended\n    },\n  });\n}\n",
    "metadata": {
      "source": "app/routes/logout.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "import { json, redirect } from \"@remix-run/node\";\nimport { createUser } from \"~/models/user.server\";\nimport { Form, Link, useActionData } from \"@remix-run/react\";\nimport { GalleryVerticalEnd } from \"lucide-react\";\nimport ModeToggle from \"~/components/darkModeToggle\";\nimport { cn } from \"~/lib/utils\";\nimport { Label } from \"~/components/ui/label\";\nimport { Input } from \"~/components/ui/input\";\nimport { Button } from \"~/components/ui/button\";\nimport { FaGithubAlt } from \"react-icons/fa\";\n\nexport const action = async ({ request }: { request: Request }) => {\n    const body = await request.formData();\n    const email = body.get(\"email\") as string;\n    const password = body.get(\"password\") as string;\n    const username = body.get(\"username\") as string;\n\n    if (!email || !password || !username) {\n        return json({ error: \"Missing fields\" }, { status: 400 });\n    }\n\n    try {\n        await createUser({ email, password, username });\n        console.log(\"User created\", { email, password, username });\n        // Returning to the Login Page to ensure if the account is created\n        return redirect(\"/login\");\n    } catch (error) {\n        console.error(error);\n        return json({ error: \"Failed to register\" }, { status: 500 });\n    }\n};\n\nexport default function RegisterPage({ ...props }) {\n    const actionData = useActionData<typeof action>();\n\n    return (\n        <>\n            <div className=\"grid min-h-svh lg:grid-cols-2 dark:bg-zinc-950\">\n                <div className=\"flex flex-col gap-4 p-3.5 px-5\">\n                    <div className=\"flex flex-row items-center justify-between\">\n                        <Link to=\"/\" className=\"font-semibold text-xl flex flex-row items-center gap-1.5\"><GalleryVerticalEnd /> GitTalk</Link>\n                        <ModeToggle />\n                    </div>\n                    <div className=\"flex flex-1 items-center justify-center\">\n                        <div className=\"w-full max-w-xs\">\n                            <Form method=\"post\" className={cn(\"flex flex-col gap-8\")} {...props}>\n                                {/* Heading */}\n                                <div className=\"flex flex-col items-center gap-0 text-center\">\n                                    <h1 className=\"text-[20px] font-bold\">Sign up your account</h1>\n                                    <p className=\"text-xs text-muted-foreground\">\n                                        Enter your email below to sign up\n                                    </p>\n                                </div>\n\n                                {/* Error Message */}\n                                {actionData?.error && (\n                                    <p className=\"text-red-500 text-center\">{actionData.error}</p>\n                                )}\n\n                                {/* Form Fields */}\n                                <div className=\"grid gap-5\">\n\n                                    {/* Name Input */}\n                                    <div className=\"grid gap-0.5\">\n                                        <Label htmlFor=\"name\" className=\"text-[13px]\">Full Name</Label>\n                                        <Input\n                                            id=\"name\"\n                                            name=\"username\"\n                                            type=\"text\"\n                                            placeholder=\"John Doe\"\n                                            required\n                                            className=\"h-9\"\n                                        />\n                                    </div>\n                                    {/* Email Input */}\n                                    <div className=\"grid gap-0.5\">\n                                        <Label htmlFor=\"email\" className=\"text-[13px]\">Email</Label>\n                                        <Input\n                                            id=\"email\"\n                                            name=\"email\"\n                                            type=\"email\"\n                                            placeholder=\"johndoe@example.com\"\n                                            required\n                                            className=\"h-9\"\n                                        />\n                                    </div>\n\n                                    {/* Password Input */}\n                                    <div className=\"grid gap-0.5\">\n                                        <div className=\"flex items-center justify-between\">\n                                            <Label htmlFor=\"password\" className=\"text-[13px]\">Password</Label>\n                                        </div>\n                                        <Input\n                                            id=\"password\"\n                                            name=\"password\"\n                                            type=\"password\"\n                                            required\n                                            className=\"h-9\"\n                                            placeholder=\"Enter your password\"\n                                        />\n                                    </div>\n\n                                    {/* Submit Button */}\n                                    <Button type=\"submit\" className=\"w-full\">\n                                        SignUp\n                                    </Button>\n\n                                    {/* Divider */}\n                                    <div className=\"relative text-center text-sm after:absolute after:inset-0 after:top-1/2 after:z-0 after:flex after:items-center after:border-t after:border-border\">\n                                        <span className=\"relative z-10 bg-background px-2 text-muted-foreground\">\n                                            Or continue with\n                                        </span>\n                                    </div>\n\n                                    {/* GitHub Login Button */}\n                                    <button className=\"text-sm w-full flex items-center gap-2 dark:bg-zinc-900 justify-center py-1.5 rounded-md shadow-lg dark:border-none border border-zinc-100 hover:bg-zinc-100 dark:hover:bg-zinc-800\">\n                                        <FaGithubAlt className=\"h-5 w-5\" />\n                                        SignUp with GitHub\n                                    </button>\n                                </div>\n\n                                {/* Signup Link */}\n                                <div className=\"text-center text-sm\">\n                                    Already have an account?{\" \"}\n                                    <Link to=\"/login\" className=\"underline underline-offset-2\">\n                                        Login\n                                    </Link>\n                                </div>\n                            </Form>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"relative hidden bg-muted lg:block\">\n                    <img\n                        src=\"/download.jpg\"\n                        // src=\"/public/download.jpg\"\n                        alt=\"someimage\"\n                        className=\"absolute inset-0 h-full w-full object-cover dark:brightness-[0.2] dark:grayscale\"\n                    />\n                </div>\n            </div>\n        </>\n    );\n}\n",
    "metadata": {
      "source": "app/routes/register.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "import { useState } from \"react\";\n\nexport function isValidGitHubRepoUrl(url: string): boolean {\n  const regex = /^https:\\/\\/github\\.com\\/([\\w-]+)\\/([\\w.-_]+)(\\/)?$/i;\n  return regex.test(url.trim());\n}\n\nexport default function TestForm() {\n  const [input, setInput] = useState(\"\");\n  const [valid, setValid] = useState<boolean | null>(null);\n\n  return (\n    <div className=\"p-4\">\n      <h1 className=\"text-xl font-bold\">GitHub Repo URL Validator</h1>\n      <input\n        type=\"text\"\n        className=\"border px-2 py-1 mt-2\"\n        value={input}\n        onChange={(e) => setInput(e.target.value)}\n        placeholder=\"Enter GitHub repo URL\"\n      />\n      <button\n        className=\"ml-2 px-3 py-1 bg-blue-500 text-white rounded\"\n        onClick={() => setValid(isValidGitHubRepoUrl(input))}\n      >\n        Check\n      </button>\n      {valid !== null && (\n        <p className=\"mt-2 text-lg\">\n          {valid ? \"✅ Valid GitHub Repo URL\" : \"❌ Invalid URL\"}\n        </p>\n      )}\n    </div>\n  );\n}\n",
    "metadata": {
      "source": "app/routes/test.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "import type { MetaFunction } from \"@remix-run/node\";\nimport { Link } from \"@remix-run/react\";\nimport NavBar from \"./navbar\";\nimport { FaArrowRightLong } from \"react-icons/fa6\";\n\nexport const meta: MetaFunction = () => {\n  return [\n    { title: \"GitTalk_V2\" },\n    { name: \"description\", content: \"Welcome to Another Version of GitTalk!\" },\n  ];\n};\n\nexport default function Index() {\n  return (\n    <div className=\"min-h-screen dark:bg-zinc-950\">\n      <NavBar />\n      <div className=\"p-4 mt-12 md:w-3/5\">\n        <h1 className=\"text-6xl font-thin mb-1\">Welcome to <span className=\"font-serif font-semibold\">GitTalk</span></h1>\n        <p className=\"tracking-tight font-light mb-3\">\n          Lorem ipsum, dolor sit amet consectetur adipisicing elit. Eius rerum at, quibusdam laboriosam et molestiae officia minus suscipit quis optio ad accusamus? Laudantium temporibus delectus, impedit aspernatur fuga totam perspiciatis.\n          Lorem ipsum, dolor sit amet consectetur adipisicing elit. Eius rerum at, quibusdam laboriosam et molestiae officia minus suscipit quis optio ad accusamus? Laudantium temporibus delectus, impedit aspernatur fuga totam perspiciatis.\n        </p>\n        <button>\n          <Link to=\"/dashboard\" className=\"px-4 py-2 rounded-xl dark:bg-zinc-900 dark:hover:bg-zinc-800 bg-zinc-200 hover:bg-zinc-300 flex items-center gap-2 transition\">\n            <p className=\"text-sm\">Get Started!</p>\n            <FaArrowRightLong className=\"w-4 h-4 inline-block\" />\n          </Link>\n        </button>\n      </div>\n    </div>\n  );\n}",
    "metadata": {
      "source": "app/routes/_index/index.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "import { Link } from \"@remix-run/react\";\nimport { GalleryVerticalEnd } from \"lucide-react\";\nimport ModeToggle from \"~/components/darkModeToggle\";\n\nexport const buttonStyleLogin = \"px-2.5 py-1.5 dark:bg-zinc-900 bg-zinc-200 hover:bg-zinc-300 dark:hover:bg-zinc-800 rounded-md text-sm  transition\"\nexport default function NavBar() {\n    return (\n        <div className=\"flex flex-row items-center justify-between px-5 py-3\">\n            <Link to=\"/\" className=\"font-semibold text-xl flex flex-row items-center gap-1.5\"><GalleryVerticalEnd /> GitTalk</Link>\n            <div className=\"flex flex-row items-center gap-2.5\">\n                <Link to=\"/login\"><button className={buttonStyleLogin}>Login</button></Link>\n                <Link to=\"/register\"><button className={buttonStyleLogin}>SignUp</button></Link>\n                <ModeToggle />\n            </div>\n        </div>\n    )\n}",
    "metadata": {
      "source": "app/routes/_index/navbar.tsx",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "generator client {\n  provider = \"prisma-client\"\n  output   = \"../generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = \"postgresql://postgres@localhost:5433/postgres\"\n}\n\nmodel User {\n  id        String   @id @default(uuid())\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  username  String   @db.VarChar(30)\n  email     String   @unique @db.VarChar(100)\n  password  String   @db.VarChar(100)\n  credits   Int      @default(100)\n\n  // Relations\n  projects Project[]\n}\n\nmodel Project {\n  id           String   @id @default(uuid())\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n  projectName  String   @db.VarChar(100) // Moved here for user-defined naming\n  githubUrl    String   @db.VarChar(200)\n  description  String?  @db.VarChar(500)\n  userId       String\n\n  // Relations\n  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)\n  repoCommit RepoCommit[]\n}\n\nmodel RepoCommit {\n  id              String   @id @default(uuid())\n  commitHash      String\n  commitMessage   String\n  commitUrl       String\n  authorName      String\n  authorUrl       String\n  authorAvatarUrl String\n  committedAt     DateTime\n\n  projectId       String\n  project         Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)\n  @@index([commitHash])\n}\n\nmodel FileEmbeddingCache {\n  id           String   @id @default(uuid())\n  projectId    String\n  filePath     String\n  contentHash  String\n  summary      String\n  embedding    Float[]  // Use `Json` if Prisma doesn’t support Float[]\n  createdAt    DateTime @default(now())\n}",
    "metadata": {
      "source": "prisma/schema.prisma",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "# Please do not edit this file manually\n# It should be added in your version-control system (e.g., Git)\nprovider = \"postgresql\"\n",
    "metadata": {
      "source": "prisma/migrations/migration_lock.toml",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "-- CreateTable\nCREATE TABLE \"User\" (\n    \"id\" TEXT NOT NULL,\n    \"createdAt\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"updatedAt\" TIMESTAMP(3) NOT NULL,\n    \"username\" VARCHAR(30) NOT NULL,\n    \"email\" VARCHAR(100) NOT NULL,\n    \"password\" VARCHAR(100) NOT NULL,\n    \"credits\" INTEGER NOT NULL DEFAULT 100,\n\n    CONSTRAINT \"User_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"Project\" (\n    \"id\" TEXT NOT NULL,\n    \"createdAt\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"updatedAt\" TIMESTAMP(3) NOT NULL,\n    \"projectName\" VARCHAR(100) NOT NULL,\n    \"githubUrl\" VARCHAR(2048) NOT NULL,\n    \"githubToken\" VARCHAR(255),\n    \"description\" TEXT,\n    \"userId\" TEXT NOT NULL,\n\n    CONSTRAINT \"Project_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateTable\nCREATE TABLE \"RepoCommit\" (\n    \"id\" TEXT NOT NULL,\n    \"commitHash\" TEXT NOT NULL,\n    \"commitMessage\" TEXT NOT NULL,\n    \"authorName\" TEXT NOT NULL,\n    \"authorAvatarUrl\" TEXT NOT NULL,\n    \"committedAt\" TIMESTAMP(3) NOT NULL,\n    \"projectId\" TEXT NOT NULL,\n\n    CONSTRAINT \"RepoCommit_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"User_email_key\" ON \"User\"(\"email\");\n\n-- CreateIndex\nCREATE INDEX \"RepoCommit_projectId_idx\" ON \"RepoCommit\"(\"projectId\");\n\n-- CreateIndex\nCREATE INDEX \"RepoCommit_commitHash_idx\" ON \"RepoCommit\"(\"commitHash\");\n\n-- AddForeignKey\nALTER TABLE \"Project\" ADD CONSTRAINT \"Project_userId_fkey\" FOREIGN KEY (\"userId\") REFERENCES \"User\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"RepoCommit\" ADD CONSTRAINT \"RepoCommit_projectId_fkey\" FOREIGN KEY (\"projectId\") REFERENCES \"Project\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n",
    "metadata": {
      "source": "prisma/migrations/20250603141906_init/migration.sql",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "/*\n  Warnings:\n\n  - You are about to drop the column `description` on the `Project` table. All the data in the column will be lost.\n  - You are about to drop the column `githubToken` on the `Project` table. All the data in the column will be lost.\n  - You are about to drop the column `githubUrl` on the `Project` table. All the data in the column will be lost.\n  - You are about to drop the column `projectId` on the `RepoCommit` table. All the data in the column will be lost.\n  - Added the required column `repositoryId` to the `Project` table without a default value. This is not possible if the table is not empty.\n  - Added the required column `repositoryId` to the `RepoCommit` table without a default value. This is not possible if the table is not empty.\n\n*/\n-- DropForeignKey\nALTER TABLE \"RepoCommit\" DROP CONSTRAINT \"RepoCommit_projectId_fkey\";\n\n-- DropIndex\nDROP INDEX \"RepoCommit_projectId_idx\";\n\n-- AlterTable\nALTER TABLE \"Project\" DROP COLUMN \"description\",\nDROP COLUMN \"githubToken\",\nDROP COLUMN \"githubUrl\",\nADD COLUMN     \"repositoryId\" TEXT NOT NULL;\n\n-- AlterTable\nALTER TABLE \"RepoCommit\" DROP COLUMN \"projectId\",\nADD COLUMN     \"repositoryId\" TEXT NOT NULL;\n\n-- CreateTable\nCREATE TABLE \"Repository\" (\n    \"id\" TEXT NOT NULL,\n    \"githubUrl\" VARCHAR(2048) NOT NULL,\n    \"description\" TEXT,\n    \"createdAt\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    \"updatedAt\" TIMESTAMP(3) NOT NULL,\n\n    CONSTRAINT \"Repository_pkey\" PRIMARY KEY (\"id\")\n);\n\n-- CreateIndex\nCREATE UNIQUE INDEX \"Repository_githubUrl_key\" ON \"Repository\"(\"githubUrl\");\n\n-- CreateIndex\nCREATE INDEX \"RepoCommit_repositoryId_idx\" ON \"RepoCommit\"(\"repositoryId\");\n\n-- AddForeignKey\nALTER TABLE \"Project\" ADD CONSTRAINT \"Project_repositoryId_fkey\" FOREIGN KEY (\"repositoryId\") REFERENCES \"Repository\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n\n-- AddForeignKey\nALTER TABLE \"RepoCommit\" ADD CONSTRAINT \"RepoCommit_repositoryId_fkey\" FOREIGN KEY (\"repositoryId\") REFERENCES \"Repository\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n",
    "metadata": {
      "source": "prisma/migrations/20250605075609_add_repository_id/migration.sql",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "/*\n  Warnings:\n\n  - You are about to drop the column `repositoryId` on the `Project` table. All the data in the column will be lost.\n  - You are about to drop the column `repositoryId` on the `RepoCommit` table. All the data in the column will be lost.\n  - You are about to drop the `Repository` table. If the table is not empty, all the data it contains will be lost.\n  - Added the required column `githubUrl` to the `Project` table without a default value. This is not possible if the table is not empty.\n  - Added the required column `projectId` to the `RepoCommit` table without a default value. This is not possible if the table is not empty.\n\n*/\n-- DropForeignKey\nALTER TABLE \"Project\" DROP CONSTRAINT \"Project_repositoryId_fkey\";\n\n-- DropForeignKey\nALTER TABLE \"RepoCommit\" DROP CONSTRAINT \"RepoCommit_repositoryId_fkey\";\n\n-- DropIndex\nDROP INDEX \"RepoCommit_repositoryId_idx\";\n\n-- AlterTable\nALTER TABLE \"Project\" DROP COLUMN \"repositoryId\",\nADD COLUMN     \"description\" TEXT,\nADD COLUMN     \"githubUrl\" VARCHAR(200) NOT NULL;\n\n-- AlterTable\nALTER TABLE \"RepoCommit\" DROP COLUMN \"repositoryId\",\nADD COLUMN     \"projectId\" TEXT NOT NULL;\n\n-- DropTable\nDROP TABLE \"Repository\";\n\n-- AddForeignKey\nALTER TABLE \"RepoCommit\" ADD CONSTRAINT \"RepoCommit_projectId_fkey\" FOREIGN KEY (\"projectId\") REFERENCES \"Project\"(\"id\") ON DELETE CASCADE ON UPDATE CASCADE;\n",
    "metadata": {
      "source": "prisma/migrations/20250605081127_back2old/migration.sql",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "/*\n  Warnings:\n\n  - You are about to alter the column `description` on the `Project` table. The data in that column could be lost. The data in that column will be cast from `Text` to `VarChar(500)`.\n  - Added the required column `commitUrl` to the `RepoCommit` table without a default value. This is not possible if the table is not empty.\n\n*/\n-- AlterTable\nALTER TABLE \"Project\" ALTER COLUMN \"description\" SET DATA TYPE VARCHAR(500);\n\n-- AlterTable\nALTER TABLE \"RepoCommit\" ADD COLUMN     \"commitUrl\" TEXT NOT NULL;\n",
    "metadata": {
      "source": "prisma/migrations/20250607141350_newdb/migration.sql",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "/*\n  Warnings:\n\n  - Added the required column `authorUrl` to the `RepoCommit` table without a default value. This is not possible if the table is not empty.\n\n*/\n-- AlterTable\nALTER TABLE \"RepoCommit\" ADD COLUMN     \"authorUrl\" TEXT NOT NULL;\n",
    "metadata": {
      "source": "prisma/migrations/20250607141639_newdb2/migration.sql",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  },
  {
    "pageContent": "-- CreateTable\nCREATE TABLE \"FileEmbeddingCache\" (\n    \"id\" TEXT NOT NULL,\n    \"projectId\" TEXT NOT NULL,\n    \"filePath\" TEXT NOT NULL,\n    \"contentHash\" TEXT NOT NULL,\n    \"summary\" TEXT NOT NULL,\n    \"embedding\" DOUBLE PRECISION[],\n    \"createdAt\" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,\n\n    CONSTRAINT \"FileEmbeddingCache_pkey\" PRIMARY KEY (\"id\")\n);\n",
    "metadata": {
      "source": "prisma/migrations/20250630094411_add_embedding_cache/migration.sql",
      "repository": "https://github.com/fudge-fantastic/GitTalk_V2",
      "branch": "main"
    }
  }
]