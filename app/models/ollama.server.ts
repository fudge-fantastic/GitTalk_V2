import { Ollama } from "@langchain/ollama";
import { promises as fs } from "fs";

export const ollama_model = new Ollama({
  baseUrl: "http://127.0.0.1:11434",
  model: "deepseek-coder:6.7b",
});

const inputText =
  'import { Form, Link, useLoaderData } from "@remix-run/react"\nimport { RiRobot2Line } from "react-icons/ri";\nimport { PiProjectorScreen } from "react-icons/pi";\n// import { FiCreditCard } from "react-icons/fi";\nimport { RxDashboard } from "react-icons/rx";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from "~/components/ui/dropdown-menu"\n\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from "~/components/ui/sidebar"\nimport { GalleryVerticalEnd } from "lucide-react";\nimport { FaPlus, FaRegFolder } from "react-icons/fa6";\nimport { Dialog, DialogClose, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "~/components/ui/dialog";\n\n// Menu items.\nconst group1 = [\n  {\n    title: "Dashboard",\n    url: "/dashboard",\n    icon: RxDashboard,\n  },\n  {\n    title: "Q&A",\n    url: "/dashboard/askquestions",\n    icon: RiRobot2Line,\n  },\n  {\n    title: "Meetings",\n    url: "/dashboard/meetings",\n    icon: PiProjectorScreen,\n  },\n  {\n    title: "Projects",\n    url: "/dashboard/projects",\n    icon: FaRegFolder,\n  }\n]\n\ntype LoaderData = {\n  user: {\n    username: string;\n    email: string;\n  };\n  projects: {\n    id: string;\n    projectName: string;\n  }[];\n};\n\nexport function AppSidebar() {\n  const { user, projects } = useLoaderData<LoaderData>();\n  return (\n    <Sidebar className="border-none">\n      <SideBarHeaderComponent />\n      <SidebarContent>\n        <SideBarGroup1Component />\n        <SideBarGroup2Component projects={projects} />\n      </SidebarContent>\n      <SideBarFooterComponent user={user} />\n    </Sidebar>\n  )\n}\n\nfunction SideBarHeaderComponent() {\n  return (\n    <SidebarHeader className="flex flex-row items-center gap-[7px] mx-1.5 mt-3">\n      <Link to="/" className="flex flex-row items-center gap-[7px]">\n        <GalleryVerticalEnd />\n        <h1 className="text-zinc-900 dark:text-white text-xl font-semibold tracking-wide">GitTalk</h1>\n      </Link>\n    </SidebarHeader>\n  )\n}\n\nfunction SideBarGroup1Component() {\n  return (\n    <SidebarGroup>\n      <SidebarGroupLabel className="text-muted-foreground font-semibold">Application</SidebarGroupLabel>\n      <SidebarGroupContent>\n        <SidebarMenu>\n          {group1.map((item) => (\n            <SidebarMenuItem key={item.title}>\n              <SidebarMenuButton asChild>\n                <Link to={item.url}>\n                  <item.icon />\n                  <span className="font-medium">{item.title}</span>\n                </Link>\n              </SidebarMenuButton>\n            </SidebarMenuItem>\n          ))}\n        </SidebarMenu>\n      </SidebarGroupContent>\n    </SidebarGroup>\n  )\n}\n\nfunction SideBarGroup2Component({ projects }: { projects: { id: string; projectName: string }[] }) {\n  return (\n    <SidebarGroup>\n      <SidebarGroupLabel className="text-muted-foreground font-semibold">Projects</SidebarGroupLabel>\n      <SidebarGroupAction title="Add Project">\n        <Link to="/dashboard/projects/newproject">\n          <FaPlus /> <span className="sr-only">Add Project</span>\n        </Link>\n      </SidebarGroupAction>\n      <SidebarGroupContent>\n        <SidebarMenu>\n          {projects.filter((r, i) => i < 5).map((item) => (\n            <SidebarMenuItem key={item.projectName}>\n              <SidebarMenuButton asChild>\n                <Link to={`/dashboard/projects/${item.id}`} className="flex items-center gap-2">\n                  <div className="h-6 w-6 rounded-md font-medium bg-zinc-950 text-white flex items-center justify-center text-xs">\n                    {item.projectName[0].toUpperCase()}\n                  </div>\n                  <span className="font-medium">{item.projectName}</span>\n                </Link>\n              </SidebarMenuButton>\n            </SidebarMenuItem>\n          ))}\n        </SidebarMenu>\n      </SidebarGroupContent>\n      <div className="flex items-center justify-center mt-2">\n        <button className="text-sm font-medium text-muted-foreground hover:underline hover:underline-offset-2">Show more...</button>\n      </div>\n    </SidebarGroup>\n  )\n}\n\nfunction SideBarFooterComponent({ user }: { user: { username: string; email: string } }) {\n\n  const getInitials = (name: string) => {\n    const parts = name.trim().split(" ");\n    if (parts.length === 1) {\n      return parts[0][0]?.toUpperCase() || "";\n    } else {\n      return (parts[0][0] + parts[1][0])?.toUpperCase();\n    }\n  };\n\n  const initials = getInitials(user.username);\n\n  return (\n    <SidebarFooter className="flex flex-row items-center gap-3 mb-3.5 dark:hover:bg-zinc-800 ml-2 rounded-md">\n      <Dialog>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <button className="flex gap-2 focus:outline-none">\n              <div className="h-9 w-9 rounded-full bg-zinc-950 text-white flex items-center justify-center font-medium text-sm">\n                {initials}\n              </div>\n              <div className="flex flex-col text-left">\n                <p className="text-sm font-medium tracking-wide">{user.username}</p>\n                <p className="text-xs leading-none text-muted-foreground tracking-wide">{user.email}</p>\n              </div>\n            </button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent className="w-56 m-1.5">\n            <DropdownMenuLabel>My Account</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            <DropdownMenuGroup>\n              <DropdownMenuItem>\n                Profile\n              </DropdownMenuItem>\n              <DropdownMenuItem>\n                Settings\n              </DropdownMenuItem>\n            </DropdownMenuGroup>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>GitHub</DropdownMenuItem>\n            <DropdownMenuItem>Support</DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DialogTrigger className="w-full">\n              <DropdownMenuItem>\n                Logout\n              </DropdownMenuItem>\n            </DialogTrigger>\n          </DropdownMenuContent>\n        </DropdownMenu>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Are you sure?</DialogTitle>\n            <DialogDescription>\n              This will log you out of your account.\n            </DialogDescription>\n          </DialogHeader>\n          <div className="flex justify-end gap-3 mt-1">\n            <DialogClose asChild>\n              <button className="px-2 py-0.5 text-xs shadow-sm dark:shadow-none hover:shadow-md shadow-zinc-400 hover:shadow-zinc-400 dark:bg-zinc-800 border dark:hover:border-zinc-700 rounded-md font-semibold duration-150">\n                Cancel\n              </button>\n            </DialogClose>\n            <Form method="post" action="/logout">\n              <button type="submit" className="px-3 py-2 text-xs font-semibold bg-red-600 shadow-sm hover:shadow-md hover:shadow-red-500 shadow-red-500 text-white rounded-md duration-150">Logout</button>\n            </Form>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </SidebarFooter>\n  )\n}';
const pre_input = "Please summarize the given code for me:\n";

// Works slow but effective
async function saveText() {
  try {
    const completion = await ollama_model.invoke(pre_input + inputText);
    await fs.writeFile("my_summary.txt", completion, "utf8");
    console.log(`Text File Saved`);
  } catch (error) {
    console.error("Failed to save text:", error);
  }
}

saveText();
